You may have heard the term Object-Oriented Modeling, you may have even applied it whether you knew it or not. Object-oriented Modeling is a major topic in this specialization. So what is it? When solving a problem, object-oriented modeling involves the practice of representing key concepts through objects in your software. Depending on the problem, many concepts, even instances of people, places or things become distinct objects in the software. Think in terms of objects. Objects are all around you. Take a look around, what do you see? I'm guessing you see a computer or a tablet. You may also see other physical objects like a table, a door or a coffee mug. Is there anyone else in the room? They are objects as well. The room itself is even an object. So why should you use objects to represent things in your code? It is a way of keeping your code organized, flexible and reusable. It keeps code organized by having related details and specific functions in distinct, easy to find places. This creates flexibility because you can easily change details in a modular way without affecting the rest of the code. You can also reuse code and keep your program simple. Let's explore what object-oriented modeling might look like. Consider the seminar room for example. The first object we identify is the room itself. The room has details such as the room number and the seating capacity of the room. We can also identify objects that are contained within this room. What are some of these objects? Have a look around this room. There are many physical objects such as the chair, the table, the projector and the white board. Each of these physical objects could be represented by objects in software. There are specific details associated with each object. The projector has specs related to its performance such as resolution and brightness. A chair has its own details such as seat dimensions that would be relevant to a user of that object. Objects can also have individual responsibilities or behaviors. For example, the projector is responsible to power on, take a video input and display an image. What about a person as an object? That works too. Let's put a person object in this room. A person object would have details such as name, age, gender and occupation. There are also countless behaviors that a person object could complete. In this example, Ken could write on the white board, turn on the projector, sit in a chair or open his laptop on the table. It's easy to think about people or electronics knowing about the information when achieving behaviors. For example, a person object knows their name and age and a laptop knows its specs.In object-oriented modeling, even inanimate objects know their information. So a chair knows its dimensions and location. A door knows its frame height and the angle that the door is ajar. The white board knows its height and width as well as if it's blank or contains writing. With object-oriented thinking, you often think of everything as objects even living things. And all these objects are self-aware even inanimate things. object-oriented modeling will be a major topic of the work that you do in this specialization. Start viewing the world around you in terms of objects. It will help you out when you're called upon to design software using object-oriented Modeling. Think objects.