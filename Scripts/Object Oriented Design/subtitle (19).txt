[MUSIC] Having a well designed system means
that it needs to be well organized. We've seen how this can be achieved
with a variety of design principles. One thing we are yet to explore is
how to address information access. You do not need everything in your
system to know about everything else. The manual should only have access to the
information that it needs to do its job. So how do we limit the information our
various modules of our system can have access to? We do this by applying information hiding. Information hiding allows models of our
system to give others the minimum amount of information needed to use them
correctly and hide everything else. Information hiding allows a developer
to work on a module separately with other developers needing to know
the implementation details of this module. They can only use this module
through its interface. In general things that might change, like
implementation details, should be hidden. And things that should not change,
like assumptions, are revealed through interfaces. Let's say, we were both working on
the same system but on different modules. If my module requires information from
your module, information hiding allows you to provide me with just the information
I need for my module to work. You do not have to give me access
to everything in your module, and you don't need to know
how my module works. Information hiding is often
associated with encapsulation. We use encapsulation to
bundle attributes and behaviors into their appropriate class,
and expose an interface to provide access. Encapsulation effectively hides
the implementation of behaviors since the only access is through
an interface of specific methods. Other classes can only rely on
the information in these method signatures not the underlying implementations. Information hiding through encapsulation
allows us to change the implementation without changing the expected outcome. We can still fulfill the expectations for a behavior without
exposing how we get there. Take a look at this example, the string
library has a method called concat. But how is it implemented? Are there extra data
structures being used? Or other method calls being made
that we do not have access to? As a user of the library you are given
access to the concat nation functionality through an interface,
a particular method signature. But you are not shown how
the functionality is implemented. That is because
the implementation may change and you should not depend on
how it actually works. The interface establishes the only
assumptions you can rely on. Attributes can also be hidden in order
to prevent critical information of a classroom being changed directly. For example if an attribute is critical
to all the behaviors of a class, then we do not want any external
classes changing it directly. You can apply information hiding to
your own classes in your system. It will allow you to hide
information that you need but do not want to show to others. Encapsulation is the practical design
principle used to apply the concept of information hiding. You can hide information through
the use of access modifiers. You probably have experience using them. Access modifiers change which classes are
able to access attributes and behaviors. They also determine which attribute and behaviors a superclass will
share with its subclasses. There are four levels of access in Java,
public, protected, default, and private. Attributes with a public access
modifier are accessible by any class in your system. This means that other classes can
retrieve and modify the attribute. Public methods are also accessible
by any class in your system. But this access does not
allow other classes to change the implementation of the behavior for
the method. A publicly accessible methods simply
allows other classes to call the method and receive any output from it. In this example the Person
class has a public attribute which anyone can access and
have modified to be johnDoe. The Person class also has a publicly
accessible method named sleep. Notice that we can invoke the behavior but
we cannot change how it is implemented because it is hidden from
us through encapsulation. Protected behaviors and attributes are not
accessible to every class in the system. They are only available to
the encapsulating class itself, all subclasses, and
classes within the same package. Packages are the means by which Java
organizes related classes into a single namespace. Let's take a look at another
example to see what this means. We have put the Person class
in a package called Populace which contains all classes related
to the people of a country. Notice that the Person's
name attribute is protected. The University class is in a new package
called EducationalInstatitution. This package imports everything
in the Populace package which will give us access to
the publicly accessible Person class. If you look at the main method, you'll
notice emphasized on size line of code. This is to bring your attention that
this line of code does not work. We cannot access the name attribute from
the Person class because it is protected and it is in a different package. This access modifier also
applies to methods in classes. The default access modifier will
only allow access to attributes and methods to subclasses and
to the encapsulating class. This access modifier is also
called the no modifier access because you do not need
to explicitly declare it. See how we haven't declared any
access modifier for a name attribute? This will set the access
to default access, and apply the default access level. The last access modifier
is called private. Private attributes and methods are not
accessible by any class other than by the encapsulating class itself. This means these attributes
cannot be accessed directly and these methods cannot be
invoked by any other classes. Information hiding is a powerful idea. You control what information
you want to share and what behaviors you want to let others see. You reveal assumptions through
interfaces that others can rely on and hide changeable things like
implementation details. Information hiding allows you
to build flexible, reusable, and maintainable systems.